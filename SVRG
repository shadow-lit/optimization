import torch
from torch.functional import norm
from torch.nn.modules import linear
from torch.utils.data import Dataset, DataLoader
import torchvision
from torchvision import datasets
import numpy as np
import matplotlib.pyplot as plt
import cv2
from PIL import Image
from math import log, tanh
from numpy.core.fromnumeric import size
import numpy as np
from torch import autograd
import torch.nn as nn
from torch.nn import Sequential, ReLU, Tanh
import matplotlib.pyplot as plt
from torch.optim import optimizer
from numpy import float32, pi
import matplotlib.pyplot as plt
import torch.nn.functional as F
from torch.autograd import Variable
def img_show(img):
    pil_img = Image.fromarray(np.uint8(img))
    pil_img.show()
class Net(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.linear = nn.Linear(784,10)
    def forward(self, input):
        return self.linear(input)
#get data
train_dataset = datasets.MNIST(root='./MNIST', train = True, download = True, transform = torchvision.    transforms.ToTensor())
test_dataset = datasets.MNIST(root='./MNIST', train = False, download = True, transform = torchvision.    transforms.ToTensor())
train_dataloader = DataLoader(train_dataset, batch_size = len(train_dataset))
test_dataloader = DataLoader(test_dataset, batch_size = len(test_dataset))
for data in train_dataloader:
    img, target0 = data
img = img.reshape(60000, 784)
""" for data in test_dataloader:
    imgt, targett = data
imgt = imgt.reshape(60000, 784) """
imgmean = torch.mean(img)
imgvariance = torch.norm(img-imgmean)
imgmin = torch.min(img)
imgmax = torch.max(img)
img = (img - imgmin)/(imgmax-imgmin)

model = nn.Linear(784,10)
aa= torch.tensor(model.weight).reshape(784,10)
bb = torch.tensor(model.bias)
A = Variable(aa, requires_grad=True)
b = Variable(bb, requires_grad=True)
recordy = []
recordx = []
cnt = 0
for i in range(200):
    print(i)
    A = Variable(A, requires_grad=True)
    b = Variable(b, requires_grad=True)
    tA = Variable(torch.clone(A),requires_grad = True)
    tb = Variable(torch.clone(b),requires_grad = True)
    loss = F.cross_entropy(torch.mm(img, tA) + tb, target0) + 1e-4*(torch.norm(tA)+torch.norm(tb))
    loss.backward() 
    mua = torch.clone(tA.grad)
    mub = torch.clone(tb.grad)
    tA.grad = torch.zeros(tA.shape)
    tb.grad = torch.zeros(tb.shape)
    #120000æ¬¡
    choose1 = np.random.randint(60000, size = 120000)
    imgc = img[choose1].reshape(120000,784)
    input1 = torch.mm(imgc, A) + b
    loss = F.cross_entropy(input1, target0[choose1]) + 1e-4*(torch.norm(A)+torch.norm(b))
    loss.backward()
    input2 = torch.mm(imgc, tA) + tb
    loss2 = F.cross_entropy(input2, target0[choose1]) + 1e-4*(torch.norm(tA)+torch.norm(tb))
    loss2.backward()
    recordx.append(cnt)
    cnt= cnt + 1
    print(cnt,loss)
    recordy.append(loss.detach().numpy())
    A = A - 0.025*(A.grad-tA.grad+mua*2)
    b = b - 0.025*(b.grad-tb.grad+mub*2)
    tA.grad = torch.zeros(tA.shape)
    tb.grad = torch.zeros(tb.shape)
    A.grad = torch.zeros(A.shape)
    b.grad = torch.zeros(b.shape)
plt.plot(recordx[100:], recordy[100:], color = 'blue', label='SVRG-0.025')
